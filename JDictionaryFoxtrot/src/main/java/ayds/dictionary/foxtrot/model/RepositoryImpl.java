package ayds.dictionary.foxtrot.model;import ayds.dictionary.foxtrot.model.databases.DataBase;import ayds.dictionary.foxtrot.model.exceptions.TranslatorException;import ayds.dictionary.foxtrot.model.externalServices.adapters.ServiceAdapter;import ayds.dictionary.foxtrot.model.externalServices.ServicesDef;import ayds.dictionary.foxtrot.model.externalServices.Source;import java.io.IOException;import java.util.Deque;import java.util.HashMap;import java.util.LinkedList;import java.util.Map;class RepositoryImpl implements Repository{    private final String dataBaseSymbol = "[*]";    private final String NO_RESULT_MESSAGE = "No result";    private Map<Source, Exception> exceptionMap;    private DataBase dataBase;    private ServicesDef services;    RepositoryImpl(DataBase dataBase, ServicesDef services) {        this.dataBase = dataBase;        this.services = services;        exceptionMap = new HashMap<Source, Exception>();    }    public Iterable<Definition> getDefinitions(String term) {        Deque<Definition> result = new LinkedList<Definition>();        Iterable<Source> sources = services.getSourcesSet();        exceptionMap.clear();        for (Source source : sources) {            Definition definition = getDefinitionFromSource(source,term);            if (definition.getMeaning() != NO_RESULT_MESSAGE)                result.addFirst(definition);            else                result.addLast(definition);        }        TranslatorModelModule.getInstance().getExceptionHandler().notifyServiceExceptions(exceptionMap);        return result;    }    private Definition getDefinitionFromSource(Source source, String term) {        Definition definition = dataBase.getMeaning(term,source);        if (existsDefinitionInDatabase(definition)) {            setCatchedSign(definition);        }        else {            String meaning = getMeaningFromService(source,term);            if (existsMeaning(meaning)) {                definition = new Definition(term, meaning, source);                saveDefinition(definition);            } else {                definition = new Definition(term, NO_RESULT_MESSAGE, source);            }        }        return definition;    }    private String getMeaningFromService(Source source,String term) {        ServiceAdapter serviceAdapter = services.getExternalService(source);        String meaning = null;        try {            meaning = serviceAdapter.getMeaning(term);        } catch(Exception e) {            exceptionMap.put(source,e);        }        return meaning;    }    private boolean existsDefinitionInDatabase(Definition definition) {        return definition != null;    }    private boolean existsMeaning(String meaning) {        return meaning != null;    }    private void setCatchedSign(Definition definition) {        definition.setMeaning(dataBaseSymbol + definition.getMeaning());    }    private void saveDefinition(Definition definition) {        dataBase.saveDefinition(definition);    }}