package ayds.dictionary.foxtrot.model;import ayds.dictionary.foxtrot.model.databases.DataBase;import ayds.dictionary.foxtrot.model.exceptions.TranslatorException;import ayds.dictionary.foxtrot.model.externalServices.adapters.ServiceAdapter;import ayds.dictionary.foxtrot.model.externalServices.ServicesDef;import ayds.dictionary.foxtrot.model.externalServices.Source;import java.io.IOException;import java.util.Deque;import java.util.LinkedList;class RepositoryImpl implements Repository{    private final String dataBaseSymbol = "[*]";    private DataBase dataBase;    private ServicesDef services;    RepositoryImpl(DataBase dataBase, ServicesDef services) {        this.dataBase = dataBase;        this.services = services;    }    public Iterable<Definition> getDefinitions(String term) {        Deque<Definition> result = new LinkedList<Definition>();        Iterable<Source> sources = services.getSourcesSet();        for (Source source : sources) {            Definition definition = dataBase.getMeaning(term,source);            if (definition != null) { // si esta en base de datos                setCatchedSign(definition);                result.addFirst(definition);            }            else {                ServiceAdapter service = services.getExternalService(source);                String meaning = getMeaningFromService(term,service);                if (meaning != null) { // si existe resultado del servicio                    definition = new Definition(term, meaning, source);                    saveDefinition(definition);                    result.addFirst(definition);                }                else { // no hubo resultado del servicio                    definition = new Definition(term,"",source);                    result.addLast(definition);                }            }        }        return result;    }    private String getMeaningFromService(String term, ServiceAdapter service) {        String meaning = null;        try {            meaning = service.getMeaning(term);        } catch (IOException e) {            TranslatorModelModule.getInstance().getExceptionHandler().notifyException(new TranslatorException("Hubo un fallo en la conexi√≥n al servicio."));        }        return meaning;    }    private void setCatchedSign(Definition definition) {        definition.setMeaning(dataBaseSymbol + definition.getMeaning());    }    private void saveDefinition(Definition definition) {        dataBase.saveDefinition(definition);    }}