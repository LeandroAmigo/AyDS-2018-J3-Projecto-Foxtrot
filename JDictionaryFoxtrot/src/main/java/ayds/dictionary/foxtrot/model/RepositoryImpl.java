package ayds.dictionary.foxtrot.model;import ayds.dictionary.foxtrot.model.databases.DataBase;import ayds.dictionary.foxtrot.model.exceptions.TranslatorException;import ayds.dictionary.foxtrot.model.parsers.ParserFromXML;import java.io.IOException;class RepositoryImpl implements Repository{    private final String dataBaseSymbol = "[*]";    private DataBase dataBase;    private ServiceAdapter service;    RepositoryImpl(DataBase dataBase, ServiceAdapter service) {        this.dataBase = dataBase;        this.service = service;    }    public Definition getDefinition(String term) {        Definition definition = dataBase.getMeaning(term);        if (definition == null) {            String meaning = getMeaningFromService(term);            if (meaning != null) {                meaning = ParserFromXML.getInstance().format(meaning);                definition = new Definition(term, meaning, service.getSource());                saveDefinition(definition);            }        }        else{            String meaningCache = getCatchedResult(definition.getMeaning());            definition.setMeaning(meaningCache);        }        return definition;    }    private String getMeaningFromService(String term) {        String meaning = null;        try {            meaning = service.getMeaning(term);        } catch (IOException e) {            TranslatorModelModule.getInstance().getExceptionHandler().notifyException(new TranslatorException("Hubo un fallo en la conexi√≥n al servicio."));        }        return meaning;    }    private String getCatchedResult(String term) {        return dataBaseSymbol + term;    }    private void saveDefinition(Definition definition) {        dataBase.saveDefinition(definition);    }}